#include <behaviors.dtsi>
#include <dt-bindings/zmk/backlight.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/mouse.h>
#include <dt-bindings/zmk/rgb.h>

&mt { tapping-term-ms = <225>; };

/ {
    behaviors {
        #include "macros.dtsi"
      #include "version.dtsi"
      #ifndef VERSION_MACRO

        macro_ver: macro_ver {
            compatible = "zmk,behavior-macro";
            label = "macro_version";
            #binding-cells = <0>;
            bindings = <&kp RET>;
        };

        #endif

        as_ht: autoshift_hold_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "AUTOSHIFT_HOLD_TAP";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            bindings = <&shifted>, <&kp>;

            quick-tap-ms = <175>;
            flavor = "tap-preferred";
        };

        shifted: macro_shifted_kp {
            #binding-cells = <1>;
            label = "MACRO_SHIFTED_KP";
            compatible = "zmk,behavior-macro-one-param";
            bindings =
                <&macro_press>,
                <&kp LSHFT &macro_param_1to1>,
                <&macro_tap>,
                <&kp MACRO_PLACEHOLDER>,
                <&macro_release>,
                <&kp LSHFT>;
        };

        as: autoshift {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            label = "AUTOSHIFT_KP";
            bindings =
                <&macro_press>,
                <&macro_param_1to1 &macro_param_1to2 &as_ht MACRO_PLACEHOLDER MACRO_PLACEHOLDER>,
                <&macro_pause_for_release>,
                <&macro_release>,
                <&macro_param_1to1 &macro_param_1to2 &as_ht MACRO_PLACEHOLDER MACRO_PLACEHOLDER>;
        };

        smiley: smiley {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp COLON &kp MINUS &kp RPAR &kp LC(Z) &kp SPACE &kp LC(Z)>;
            label = "SMILEY";
        };

        vs_close_windows: vs_close_windows {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LA(W) &kp L>;
            label = "VS_CLOSE_WINDOWS";
        };

        vs_git_commit: vs_git_commit {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LA(G) &kp C>;
            label = "VS_GIT_COMMIT";
        };

        vs_clean_build: vs_clean_build {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LA(B) &kp C>;
            label = "VS_CLEAN_BUILD";
        };

        vs_git_history: vs_git_history {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LA(G) &kp H>;
            label = "VS_GIT_HISTORY";
        };

        equal_lt: equal_lt {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp EQUAL &kp GREATER_THAN>;
            label = "EQUAL_LT";
        };

        macro_parens: macro_parens {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LEFT_PARENTHESIS &kp RIGHT_PARENTHESIS &kp LEFT>;
            label = "MACRO_PARENS";
        };

        macro_square: macro_square {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LEFT_BRACKET &kp RIGHT_BRACKET &kp LEFT>;
            label = "MACRO_SQUARE";
        };

        macro_curly: macro_curly {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LEFT_BRACE &kp RIGHT_BRACE &kp LEFT>;
            label = "MACRO_CURLY";
        };

        macro_pointy: macro_pointy {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LESS_THAN &kp GREATER_THAN &kp LEFT>;
            label = "MACRO_POINTY";
        };

        macro_quote_pair: macro_quote_pair {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp DOUBLE_QUOTES &kp DOUBLE_QUOTES &kp LEFT>;
            label = "MACRO_QUOTE_PAIR";
        };

        macro_backtick_pair: macro_backtick_pair {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp GRAVE &kp GRAVE &kp LEFT>;
            label = "MACRO_BACKTICK_PAIR";
        };

        f13_switcher_mac: f13_switcher_mac {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp F13 &to 11>;
            label = "F13_SWITCHER_MAC";
        };

        f13_confirm_mac: confirm_app_switch {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp ENTER &to 0>;
            label = "CONFIRM_APP_SWITCH";
        };

        single_quote_pair: single_quote_pair {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp SQT &kp SQT &kp LEFT>;
            label = "SINGLE_QUOTE_PAIR";
        };

        f13_app_sw_windows: f13_app_sw_windows {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp F13 &to 14>;
            label = "F13_APP_SW_WINDOWS";
        };

        f13_confirm_windows: f13_confirm_windows {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp ENTER &to 1>;
            label = "F13_CONFIRM_WINDOWS";
        };

        windows_oe: windows_oe {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kt LEFT_META &kp O &kt LEFT_META>;
            label = "WINDOWS_OE";
        };

        windows_ae: windows_ae {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kt LEFT_META &kp SINGLE_QUOTE &kt LEFT_META>;
            label = "WINDOWS_AE";
        };

        windows_aa: windows_aa {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kt LEFT_META &kp A &kt LEFT_META>;
            label = "WINDOWS_AA";
        };

        hm: homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick_tap_ms = <175>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };

        shift_caps_words: shift_caps_words {
            compatible = "zmk,behavior-tap-dance";
            label = "SHIFT_CAPS_WORDS";
            #binding-cells = <0>;
            bindings = <&kp LEFT_SHIFT>, <&caps_word>;
        };

        holdtap_tap_preferred: holdtap_tap_preferred {
            compatible = "zmk,behavior-hold-tap";
            label = "HOLDTAP_TAP_PREFERRED";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "tap-preferred";
        };

        hml: hml {
            compatible = "zmk,behavior-hold-tap";
            label = "HML";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <150>;
            flavor = "balanced";
            hold-trigger-on-release;
            hold-trigger-key-positions = <8 9 10 11 12 22 23 24 25 26 40 41 42 43 44 54 55 56 57 58 65 66 69 70 13 27 45 59>;
        };

        hmr: hmr {
            compatible = "zmk,behavior-hold-tap";
            label = "HMR";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <150>;
            flavor = "balanced";
            hold-trigger-on-release;
            hold-trigger-key-positions = <1 2 3 4 5 15 16 17 18 19 29 30 31 32 33 47 48 49 50 51 65 66 70 69 0 14 28 46>;
        };

        htnr: htnr {
            compatible = "zmk,behavior-hold-tap";
            label = "HTNR";
            bindings = <&mo>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            flavor = "balanced";
            hold-trigger-key-positions = <7 8 9 10 11 12 13 21 22 23 24 25 26 27 38 39 40 41 42 43 44 45 54 55 56 57 58 59 69 70 71 72 73 74 75>;
            hold-trigger-on-release;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <150>;
        };

        htnl: htnl {
            compatible = "zmk,behavior-hold-tap";
            label = "HTNL";
            bindings = <&mo>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            flavor = "balanced";
            hold-trigger-on-release;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <150>;
            hold-trigger-key-positions = <0 1 2 3 4 5 6 14 15 16 17 18 19 20 28 29 30 31 32 33 34 35 46 47 48 49 50 51 60 61 62 63 64 65 66>;
        };
    };

    macros {
    };

    keymap {
        compatible = "zmk,keymap";

        mac {
            label = "mac";
            bindings = <
&kp GRAVE          &kp N1        &kp N2    &kp N3  &kp N4         &kp N5  &kp NUMBER_6                                                                               &lt 5 NUMBER_7  &kp NUMBER_8  &kp NUMBER_9    &kp NUMBER_0  &kp MINUS              &kp EQUAL                    &kp BACKSPACE
&kp TAB            &kp Q         &kp W     &kp E   &kp R          &kp T   &to 1                                                                                      &none           &kp Y         &kp U           &kp I         &kp O                  &kp P                        &kp BACKSLASH
&kp ESC            &kp A         &kp S     &kp D   &kp F          &kp G   &f13_switcher_mac  &mo 7          &kp LC(LG(LA(D)))      &kp LCTRL          &mo 7          &none           &kp H         &kp J           &kp K         &kp L                  &kp SEMICOLON                &kp SQT
&shift_caps_words  &kp Z         &kp X     &kp C   &kp V          &kp B                                     &kp LC(LG(LA(S)))      &kp LA(LC(LG(V)))                                 &kp N         &kp M           &kp COMMA     &kp DOT                &kp FSLH                     &kp RSHFT
&kp LCTRL          &kp LEFT_ALT  &kp LGUI  &mo 10  &kp LEFT_META          &mo 2              &kp BACKSPACE  &kp LS(LC(LG(A)))      &kp LA(LC(LG(B)))  &kp BACKSPACE  &lt 2 SPACE                   &kp RIGHT_META  &mo 10        &mt RGUI LEFT_BRACKET  &mt RIGHT_ALT RIGHT_BRACKET  &mt RCTRL ENTER
            >;
        };

        windows {
            label = "Windows";
            bindings = <
&kp GRAVE          &kp N1    &kp N2    &kp N3  &kp N4     &kp N5  &kp NUMBER_6                                                                                                 &lt 5 NUMBER_7      &kp NUMBER_8  &kp NUMBER_9  &kp NUMBER_0  &kp MINUS                    &kp EQUAL                   &kp BACKSPACE
&kp TAB            &kp Q     &kp W     &kp E   &kp R      &kp T   &to 0                                                                                                        &kp LG(L)           &kp Y         &kp U         &kp I         &kp O                        &kp P                       &kp BACKSLASH
&kp ESC            &kp A     &kp S     &kp D   &kp F      &kp G   &f13_app_sw_windows  &mo 7            &kp LS(LA(LC(LG(NUMBER_6))))      &kp LEFT_GUI          &mo 7          &kp LC(LA(DELETE))  &kp H         &kp J         &kp K         &kp L                        &kp SEMICOLON               &kp SQT
&shift_caps_words  &kp Z     &kp X     &kp C   &kp V      &kp B                                         &kp LS(LC(LA(LG(NUMBER_5))))      &kp LA(LG(NUMBER_4))                                     &kp N         &kp M         &kp COMMA     &kp DOT                      &kp FSLH                    &shift_caps_words
&kp LCTRL          &kp LALT  &kp LGUI  &mo 9   &kp LCTRL          &mo 3                &lt 6 BACKSPACE  &kp LS(LC(LA(LG(NUMBER_4))))      &kp LA(LG(NUMBER_6))  &kp BACKSPACE  &kp SPACE                         &kp RCTRL     &mo 9         &mt RIGHT_META LEFT_BRACKET  &mt LEFT_ALT RIGHT_BRACKET  &mt RCTRL ENTER
            >;
        };

        fn_mac {
            bindings = <
&kp LS(LGUI)    &kp F1        &kp F2         &kp F3     &kp F4     &kp F5         &tog 3                                                             &mo 5                 &kp F6                 &kp F7         &kp F8         &kp F9                   &kp F10        &kp DELETE
&kp LS(LALT)    &kp LG(Q)     &kp LG(W)      &none      &kp LG(R)  &kp LG(T)      &kp LS(LC(LA(LG(V))))                                              &kp LG(LS(NUMBER_4))  &none                  &none          &kp LA(LG(I))  &none                    &trans         &smiley
&none           &kp LG(A)     &none          &none      &none      &equal_lt      &kp LS(LG(LA(LC(B))))  &trans      &trans      &trans  &trans      &none                 &kp LEFT               &kp DOWN       &kp UP_ARROW   &kp RIGHT                &none          &none
&kp LEFT_SHIFT  &kp LG(Z)     &kp LG(X)      &kp LG(C)  &kp LG(V)  &kp LG(LS(V))                                     &trans      &trans                                    &mt LG(LEFT) LA(LEFT)  &none          &none          &mt LG(RIGHT) LA(RIGHT)  &none          &none
&kp LCTRL       &kp LEFT_ALT  &kp LEFT_META  &mkp MB4   &mkp MB5                  &none                  &kp DELETE  &trans      &trans  &kp DELETE  &kp LG(SPACE)                                &macro_parens  &macro_square  &macro_curly             &macro_pointy  &macro_quote_pair
            >;
        };

        fn_windows {
            bindings = <
&kp LA(LC(LG(Z)))  &kp F1        &kp F2         &kp F3     &kp F4          &kp F5     &kp LC(LS(R))                                                   &mo 5            &kp F6             &kp F7         &kp F8         &kp F9             &kp F10        &kp DELETE
&kp LA(LC(LG(Y)))  &kp LA(F4)    &kp LC(F4)     &none      &kp LC(R)       &kp LC(T)  &kp LG(LC(LA(N5)))                                              &kp PRINTSCREEN  &none              &none          &kp LC(LS(I))  &none              &kp LS(LC(P))  &smiley
&none              &kp LC(A)     &none          &none      &none           &none      &kp LG(LC(LA(N6)))  &trans      &trans      &trans  &trans      &none            &kp LEFT           &kp DOWN       &kp UP_ARROW   &kp RIGHT          &none          &none
&kp LEFT_SHIFT     &kp LC(Z)     &kp LC(X)      &kp LC(C)  &kp LS(INSERT)  &kp LG(V)                                  &trans      &trans                               &mt HOME LC(LEFT)  &kp LC(LS(M))  &none          &mt END LC(RIGHT)  &none          &macro_quote_pair
&kp LCTRL          &kp LEFT_ALT  &kp LEFT_META  &mkp MB4   &mkp MB5                   &none               &kp DELETE  &trans      &to 15  &kp DELETE  &kp LA(SPACE)                       &macro_parens  &macro_square  &macro_curly       &macro_pointy  &single_quote_pair
            >;
        };

        keypad {
            bindings = <
&kp EQUAL  &kp N1     &kp N2    &kp N3    &kp N4     &kp N5  &trans                                                   &mo 0      &kp N6  &kp KP_NUM  &kp KP_EQUAL  &kp KP_DIVIDE  &kp KP_MULTIPLY  &kp MINUS
&kp TAB    &kp Q      &kp W     &kp E     &kp R      &kp T   &none                                                    &none      &kp Y   &kp KP_N7   &kp KP_N8     &kp KP_N9      &kp KP_MINUS     &kp BSLH
&kp ESC    &kp A      &kp S     &kp D     &kp F      &kp G   &none     &kp LCTRL  &kp LALT      &kp LGUI   &kp RCTRL  &none      &kp H   &kp KP_N4   &kp KP_N5     &kp KP_N6      &kp KP_PLUS      &kp SQT
&kp LSHFT  &kp Z      &kp X     &kp C     &kp V      &kp B                        &kp HOME      &kp PG_UP                        &kp N   &kp KP_N1   &kp KP_N2     &kp KP_N3      &kp KP_ENTER     &kp RSHFT
&mo 5      &kp GRAVE  &kp CAPS  &kp LEFT  &kp RIGHT          &kp BSPC  &kp DEL    &kp END       &kp PG_DN  &kp ENTER  &kp KP_N0          &kp UP      &kp DOWN      &kp KP_DOT     &kp RBKT         &mo 5
            >;
        };

        mod {
            bindings = <
&none  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4  &none                                                  &trans                  &none  &none       &none       &none  &none  &none
&none  &none         &none         &none         &none         &none         &bootloader                                            &bootloader             &none  &none       &none       &none  &none  &none
&none  &none         &none         &none         &none         &none         &none        &none  &none      &bt BT_CLR  &none       &rgb_ug RGB_MEFS_CMD 5  &none  &none       &none       &none  &none  &none
&none  &none         &none         &none         &macro_ver    &none                             &none      &none                                           &none  &none       &none       &none  &none  &none
&none  &none         &none         &none         &none                       &none        &none  &none      &none       &bl BL_TOG  &rgb_ug RGB_TOG                &bl BL_INC  &bl BL_DEC  &none  &none  &none
            >;
        };

        visual_studio {
            bindings = <
&kp LS(LC(R))  &kp F1               &kp F2             &kp F3           &kp F4         &kp F5         &kp F6                                                       &kp F7             &kp F8           &kp F9           &kp F10       &kp F11        &kp F12  &kp LC(LA(N1))
&trans         &trans               &vs_close_windows  &kp LA(LS(D))    &kp LS(LC(R))  &kp LA(LS(R))  &kp MINUS                                                    &trans             &trans           &kp LS(LA(F12))  &trans        &trans         &trans   &kp LC(LA(N2))
&kp LSHFT      &trans               &vs_git_commit     &kp LS(LC(F12))  &kp LC(LS(F))  &kp LC(T)      &trans     &kp F11  &trans            &trans  &trans         &trans             &vs_git_history  &kp LA(END)      &kp LA(HOME)  &kp LS(LA(L))  &trans   &trans
&trans         &kp LC(PAUSE_BREAK)  &kp F9             &vs_clean_build  &kp F11        &kp LS(LC(B))                      &kp LA(HOME)      &trans                                    &kp LS(F2)       &kp LA(BSLH)     &trans        &trans         &trans   &trans
&kp LA(SLASH)  &trans               &trans             &trans           &kp F10                       &none      &kp F9   &kp LA(END)       &trans  &kp LA(ENTER)  &kp LS(LC(SPACE))                   &trans           &trans        &trans         &trans   &kp LA(ENTER)
            >;
        };

        meh {
            bindings = <
&trans  &trans             &trans             &trans             &trans             &trans             &trans                                      &trans  &trans             &trans             &trans             &trans             &trans             &trans
&trans  &kp LS(LA(LC(Q)))  &kp LS(LA(LC(W)))  &kp LS(LA(LC(E)))  &kp LS(LA(LC(R)))  &kp LS(LA(LC(T)))  &trans                                      &trans  &kp LS(LA(LC(Y)))  &kp LS(LA(LC(U)))  &kp LS(LA(LC(I)))  &kp LS(LA(LC(O)))  &kp LC(LA(LS(P)))  &trans
&trans  &kp LS(LA(LC(A)))  &kp LS(LA(LC(S)))  &kp LS(LA(LC(D)))  &kp LS(LA(LC(F)))  &kp LS(LA(LC(G)))  &trans  &trans  &trans      &trans  &trans  &trans  &kp LA(LS(LC(H)))  &kp LS(LA(LC(J)))  &kp LC(LA(LS(K)))  &kp LC(LA(LS(L)))  &trans             &trans
&trans  &kp LS(LA(LC(Z)))  &kp LS(LA(LC(X)))  &kp LS(LA(LC(C)))  &kp LS(LA(LC(V)))  &kp LC(LA(LS(B)))                  &trans      &trans                  &kp LS(LA(LC(N)))  &kp LC(LA(LS(M)))  &trans             &trans             &trans             &trans
&trans  &trans             &trans             &trans             &trans                                &trans  &trans  &trans      &trans  &trans  &trans                     &trans             &trans             &trans             &trans             &trans
            >;
        };

        mac_command {
            bindings = <
&kp LG(EQUAL)   &kp LG(N1)  &kp LG(N2)  &kp LG(N3)  &kp LG(N4)  &kp LG(N5)  &trans                                      &trans  &kp LG(N6)  &kp LG(N7)  &kp LG(N8)     &kp LG(N9)   &kp LG(N0)    &trans
&trans          &kp LG(Q)   &kp LG(W)   &kp LG(E)   &kp LG(R)   &kp LG(T)   &trans                                      &trans  &kp LG(Y)   &kp LG(U)   &kp LG(I)      &kp LG(O)    &kp LG(P)     &kp LG(BSLH)
&kp LEFT_SHIFT  &kp LG(A)   &kp LG(S)   &kp LG(D)   &kp LG(F)   &kp LG(G)   &trans  &trans  &trans      &trans  &trans  &trans  &kp LG(H)   &kp LG(J)   &kp LG(K)      &kp LG(L)    &kp LG(SEMI)  &kp LG(SQT)
&none           &kp LG(Z)   &kp LG(X)   &kp LG(C)   &kp LG(V)   &kp LG(B)                   &trans      &trans                  &kp LG(N)   &kp LG(M)   &kp LG(COMMA)  &kp LG(DOT)  &kp LG(FSLH)  &trans
&kp LEFT_ALT    &trans      &trans      &trans      &trans                  &trans  &trans  &trans      &trans  &trans  &trans              &trans      &trans         &trans       &trans        &trans
            >;
        };

        windows_danish {
            bindings = <
&none           &none          &none         &none          &none                                    &none                              &none                                  &none  &none         &none   &none                                &none        &none         &none
&none           &none          &none         &none          &equal_lt                                &none                              &none                                  &none  &kp N7        &kp N8  &kp N9                               &windows_oe  &none         &none
&none           &windows_aa    &none         &none          &holdtap_tap_preferred UNDERSCORE MINUS  &holdtap_tap_preferred PLUS EQUAL  &none  &none  &none      &none  &none  &none  &kp N4        &kp N5  &kp N6                               &equal_lt    &none         &windows_ae
&kp LEFT_SHIFT  &none          &none         &none          &none                                    &none                                            &none      &none                &kp NUMBER_1  &kp N2  &kp N3                               &none        &kp ASTERISK  &kp FSLH
&none           &macro_parens  &macro_curly  &macro_square  &macro_pointy                                                               &none  &none  &none      &none  &none  &none                &kp N0  &holdtap_tap_preferred PERIOD COMMA  &kp EQUAL    &kp PLUS      &kp MINUS
            >;
        };

        mac_danish {
            bindings = <
&none  &none                                   &none  &none  &none  &none  &none                                  &none  &none  &none          &none            &none                                   &none  &none
&none  &none                                   &none  &none  &none  &none  &none                                  &none  &none  &macro_curly   &kp EXCLAMATION  &holdtap_tap_preferred LA(LS(O)) LA(O)  &none  &none
&none  &holdtap_tap_preferred LA(LS(A)) LA(A)  &none  &none  &none  &none  &none  &none  &none      &none  &none  &none  &none  &macro_parens  &kp MINUS        &equal_lt                               &none  &holdtap_tap_preferred LA(LS(SQT)) LA(SQT)
&none  &none                                   &none  &none  &none  &none                &none      &none                &none  &macro_square  &none            &none                                   &none  &none
&none  &none                                   &none  &none  &none         &none  &none  &none      &none  &none  &none         &macro_pointy  &none            &none                                   &none  &none
            >;
        };

        app_switcher_mac {
            bindings = <
&to 0  &to 0  &to 0  &to 0  &to 0  &to 0  &to 0                                                 &to 0   &to 0     &to 0     &to 0         &to 0      &to 0  &to 0
&to 0  &to 0  &to 0  &to 0  &to 0  &to 0  &to 0                                                 &to 0   &to 0     &to 0     &to 0         &to 0      &to 0  &to 0
&to 0  &to 0  &to 0  &to 0  &to 0  &to 0  &kp F13           &trans  &trans      &trans  &trans  &to 0   &kp LEFT  &kp DOWN  &kp UP_ARROW  &kp RIGHT  &to 0  &to 0
&to 0  &to 0  &to 0  &to 0  &to 0  &to 0                            &trans      &trans                  &to 0     &to 0     &to 0         &to 0      &to 0  &to 0
&to 0  &to 0  &to 0  &to 0  &to 0         &f13_confirm_mac  &trans  &trans      &trans  &trans  &trans            &to 0     &to 0         &to 0      &to 0  &f13_confirm_mac
            >;
        };

        numbers {
            bindings = <
&trans  &trans  &trans       &trans           &trans      &trans  &trans                                      &trans  &trans  &kp N7     &kp N8  &kp N9   &trans  &trans
&trans  &trans  &none        &trans           &kp DOLLAR  &trans  &trans                                      &trans  &trans  &kp N4     &kp N5  &kp N6   &trans  &trans
&trans  &trans  &kp AT_SIGN  &kp EXCLAMATION  &kp MINUS   &trans  &trans  &trans  &trans      &trans  &trans  &trans  &trans  &kp N1     &kp N2  &kp N3   &trans  &trans
&trans  &trans  &trans       &kp TILDE        &kp GRAVE   &trans                  &trans      &trans                  &trans  &kp COMMA  &kp N0  &kp DOT  &trans  &trans
&trans  &trans  &trans       &trans           &trans              &trans  &trans  &trans      &trans  &trans  &trans          &trans     &trans  &trans   &trans  &trans
            >;
        };

        layer_14 {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans  &trans                                      &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans                                      &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans                  &trans      &trans                  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans          &trans  &trans  &trans      &trans  &trans  &trans          &trans  &trans  &trans  &trans  &trans
            >;
        };

        app_switcher_windows {
            bindings = <
&to 1  &to 1  &to 1  &to 1  &to 1  &to 1  &to 1                                                     &to 1   &to 1     &to 1     &to 1         &to 1      &to 1  &to 1
&to 1  &to 1  &to 1  &to 1  &to 1  &to 1  &to 1                                                     &to 1   &to 1     &to 1     &to 1         &to 1      &to 1  &to 1
&to 1  &to 1  &to 1  &to 1  &to 1  &to 1  &kp F13               &trans  &trans      &trans  &trans  &to 1   &kp LEFT  &kp DOWN  &kp UP_ARROW  &kp RIGHT  &to 1  &to 1
&to 1  &to 1  &to 1  &to 1  &to 1  &to 1                                &trans      &trans                  &to 1     &to 1     &to 1         &to 1      &to 1  &to 1
&to 1  &to 1  &to 1  &to 1  &to 1         &f13_confirm_windows  &trans  &trans      &trans  &trans  &trans            &to 1     &to 1         &to 1      &to 1  &f13_confirm_windows
            >;
        };

        game {
            bindings = <
&kp ESC    &kp N1    &kp N2    &kp N3  &kp N4  &kp N5  &kp N6                                            &trans  &trans  &trans  &trans     &trans   &trans    &trans
&kp TAB    &kp Q     &kp W     &kp E   &kp R   &kp T   &trans                                            &trans  &kp Y   &kp U   &kp I      &kp O    &kp P     &trans
&none      &kp A     &kp S     &kp D   &kp F   &kp G   &trans     &trans     &trans      &trans  &trans  &trans  &kp H   &kp J   &kp K      &kp L    &kp SEMI  &trans
&kp LSHFT  &kp Z     &kp X     &kp C   &kp V   &kp B                         &trans      &trans                  &kp N   &kp M   &kp COMMA  &kp DOT  &kp FSLH  &trans
&kp LCTRL  &kp LALT  &kp LGUI  &none   &none           &kp SPACE  &kp ENTER  &kp Y       &trans  &trans  &trans          &trans  &trans     &trans   &trans    &to 1
            >;
        };
    };
};
