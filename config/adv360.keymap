#include <behaviors.dtsi>
#include <dt-bindings/zmk/backlight.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/mouse.h>
#include <dt-bindings/zmk/rgb.h>

&mt { tapping-term-ms = <225>; };

/ {
    behaviors {
        #include "macros.dtsi"
      #include "version.dtsi"
      #ifndef VERSION_MACRO

        macro_ver: macro_ver {
            compatible = "zmk,behavior-macro";
            label = "macro_version";
            #binding-cells = <0>;
            bindings = <&kp RET>;
        };

        #endif

        as_ht: autoshift_hold_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "AUTOSHIFT_HOLD_TAP";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            bindings = <&shifted>, <&kp>;

            quick-tap-ms = <175>;
            flavor = "tap-preferred";
        };

        shifted: macro_shifted_kp {
            #binding-cells = <1>;
            label = "MACRO_SHIFTED_KP";
            compatible = "zmk,behavior-macro-one-param";
            bindings =
                <&macro_press>,
                <&kp LSHFT &macro_param_1to1>,
                <&macro_tap>,
                <&kp MACRO_PLACEHOLDER>,
                <&macro_release>,
                <&kp LSHFT>;
        };

        as: autoshift {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            label = "AUTOSHIFT_KP";
            bindings =
                <&macro_press>,
                <&macro_param_1to1 &macro_param_1to2 &as_ht MACRO_PLACEHOLDER MACRO_PLACEHOLDER>,
                <&macro_pause_for_release>,
                <&macro_release>,
                <&macro_param_1to1 &macro_param_1to2 &as_ht MACRO_PLACEHOLDER MACRO_PLACEHOLDER>;
        };

        smiley: smiley {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp COLON &kp MINUS &kp RPAR &kp LC(Z) &kp SPACE &kp LC(Z)>;
            label = "SMILEY";
        };

        vs_close_windows: vs_close_windows {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LA(W) &kp L>;
            label = "VS_CLOSE_WINDOWS";
        };

        vs_git_commit: vs_git_commit {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LA(G) &kp C>;
            label = "VS_GIT_COMMIT";
        };

        vs_clean_build: vs_clean_build {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LA(B) &kp C>;
            label = "VS_CLEAN_BUILD";
        };

        vs_git_history: vs_git_history {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LA(G) &kp H>;
            label = "VS_GIT_HISTORY";
        };

        equal_lt: equal_lt {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp EQUAL &kp GREATER_THAN>;
            label = "EQUAL_LT";
        };

        macro_parens: macro_parens {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LEFT_PARENTHESIS &kp RIGHT_PARENTHESIS &kp LEFT>;
            label = "MACRO_PARENS";
        };

        macro_square: macro_square {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LEFT_BRACKET &kp RIGHT_BRACKET &kp LEFT>;
            label = "MACRO_SQUARE";
        };

        macro_curly: macro_curly {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LEFT_BRACE &kp RIGHT_BRACE &kp LEFT>;
            label = "MACRO_CURLY";
        };

        macro_pointy: macro_pointy {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LESS_THAN &kp GREATER_THAN &kp LEFT>;
            label = "MACRO_POINTY";
        };

        macro_quote_pair: macro_quote_pair {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp DOUBLE_QUOTES &kp DOUBLE_QUOTES &kp LEFT>;
            label = "MACRO_QUOTE_PAIR";
        };

        macro_backtick_pair: macro_backtick_pair {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp GRAVE &kp GRAVE &kp LEFT>;
            label = "MACRO_BACKTICK_PAIR";
        };

        f13_switcher_mac: f13_switcher_mac {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp F13 &to 11>;
            label = "F13_SWITCHER_MAC";
        };

        f13_confirm_mac: confirm_app_switch {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp ENTER &to 0>;
            label = "CONFIRM_APP_SWITCH";
        };

        single_quote_pair: single_quote_pair {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp SQT &kp SQT &kp LEFT>;
            label = "SINGLE_QUOTE_PAIR";
        };

        hm: homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick_tap_ms = <175>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };

        shift_caps_words: shift_caps_words {
            compatible = "zmk,behavior-tap-dance";
            label = "SHIFT_CAPS_WORDS";
            #binding-cells = <0>;
            bindings = <&kp LEFT_SHIFT>, <&caps_word>;
        };

        holdtap_tap_preferred: holdtap_tap_preferred {
            compatible = "zmk,behavior-hold-tap";
            label = "HOLDTAP_TAP_PREFERRED";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "tap-preferred";
        };

        hml: hml {
            compatible = "zmk,behavior-hold-tap";
            label = "HML";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <150>;
            flavor = "balanced";
            hold-trigger-on-release;
            hold-trigger-key-positions = <8 9 10 11 12 22 23 24 25 26 40 41 42 43 44 54 55 56 57 58 65 66 69 70>;
        };

        hmr: hmr {
            compatible = "zmk,behavior-hold-tap";
            label = "HMR";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <150>;
            flavor = "balanced";
            hold-trigger-on-release;
            hold-trigger-key-positions = <1 2 3 4 5 15 16 17 18 19 29 30 31 32 33 47 48 49 50 51 65 66 70 69>;
        };
    };

    macros {
    };

    keymap {
        compatible = "zmk,keymap";

        mac {
            label = "mac";
            bindings = <
&kp EQUAL          &kp N1        &kp N2           &kp N3             &kp N4                           &kp N5  &tog 3                                                                  &mo 5      &kp N6  &kp N7                             &kp N8              &kp N9            &kp N0             &kp MINUS
&kp TAB            &kp Q         &kp W            &kp E              &kp R                            &kp T   &to 1                                                                   &none      &kp Y   &kp U                              &kp I               &kp O             &kp P              &kp BACKSLASH
&kp ESC            &hml LCTRL A  &hml LEFT_ALT S  &hml LEFT_SHIFT D  &hml LEFT_GUI F                  &kp G   &f13_switcher_mac  &mo 7    &kp LEFT_ALT      &kp LCTRL      &mo 7      &none      &kp H   &hmr RIGHT_META J                  &hmr RIGHT_SHIFT K  &hmr RIGHT_ALT L  &hmr RCTRL SEMI    &kp SQT
&shift_caps_words  &kp Z         &kp X            &kp C              &kp V                            &kp B                               &kp HOME          &kp PAGE_UP                          &kp N   &kp M                              &kp COMMA           &kp DOT           &kp FSLH           &kp RSHFT
&kp LCTRL          &none         &none            &kp LALT           &holdtap_tap_preferred LGUI TAB          &lt 2 BACKSPACE    &kp DEL  &kp END           &kp PAGE_DOWN  &kp ENTER  &kp SPACE          &holdtap_tap_preferred LGUI GRAVE  &kp LALT            &kp LEFT_BRACKET  &kp RIGHT_BRACKET  &mt LGUI ENTER
            >;
        };

        windows {
            label = "Windows";
            bindings = <
&kp EQUAL          &kp N1           &kp N2            &kp N3             &kp N4                            &kp N5  &tog 3                                                                       &mo 5               &kp N6  &kp N7                              &kp N8              &kp N9             &kp N0                    &kp MINUS
&kp TAB            &kp Q            &kp W             &kp E              &kp R                             &kp T   &to 0                                                                        &kp LG(L)           &kp Y   &kp U                               &kp I               &kp O              &kp P                     &kp BACKSLASH
&kp ESC            &hml LEFT_ALT A  &hml LEFT_META S  &hml LEFT_SHIFT D  &hml LCTRL F                      &kp G   &kp F13          &mo 7         &kp LEFT_ALT      &kp LEFT_GUI   &mo 7        &kp LC(LA(DELETE))  &kp H   &hmr RCTRL J                        &hmr RIGHT_SHIFT K  &hmr RIGHT_META L  &hmr RIGHT_ALT SEMICOLON  &kp SQT
&shift_caps_words  &kp Z            &kp X             &kp C              &kp V                             &kp B                                  &kp HOME          &kp PAGE_UP                                     &kp N   &kp M                               &kp COMMA           &kp DOT            &kp FSLH                  &shift_caps_words
&none              &none            &none             &mo 9              &holdtap_tap_preferred LCTRL TAB          &lt 3 BACKSPACE  &lt 6 DELETE  &kp END           &kp PAGE_DOWN  &lt 6 ENTER  &kp SPACE                   &holdtap_tap_preferred LCTRL GRAVE  &mo 9               &kp LEFT_BRACKET   &kp RIGHT_BRACKET         &kp ENTER
            >;
        };

        fn_mac {
            bindings = <
&kp LS(LGUI)    &kp F1                              &kp F2     &kp F3     &kp F4     &kp F5         &tog 3                                              &mo 5          &kp F6                 &kp F7         &kp F8         &kp F9                              &kp F10        &kp F11
&kp LS(LALT)    &kp LG(Q)                           &kp LG(W)  &trans     &kp LG(R)  &kp LG(T)      &none                                               &none          &none                  &none          &kp LG(LS(I))  &holdtap_tap_preferred LA(O) LG(O)  &trans         &smiley
&trans          &holdtap_tap_preferred LA(A) LG(A)  &kp LG(S)  &mkp MB3   &mkp MB1   &mkp MB2       &kp LS(LG(X))  &trans  &trans      &trans  &trans   &none          &kp LEFT               &kp DOWN       &kp UP_ARROW   &kp RIGHT                           &none          &holdtap_tap_preferred LA(SQT) SQT
&kp LEFT_SHIFT  &kp LG(Z)                           &kp LG(X)  &kp LG(C)  &kp LG(V)  &kp LS(LG(V))                         &trans      &trans                          &mt LG(LEFT) LA(LEFT)  &as MINUS      &equal_lt      &mt LG(RIGHT) LA(RIGHT)             &none          &kp GRAVE
&kp LCTRL       &none                               &none      &mkp MB4   &mkp MB5                  &none          &none   &trans      &trans  &as SQT  &kp LG(SPACE)                         &macro_parens  &macro_square  &macro_curly                        &macro_pointy  &macro_quote_pair
            >;
        };

        fn_windows {
            bindings = <
&kp LA(LC(LG(Z)))  &kp F1                              &kp F2      &kp F3     &kp F4          &kp F5     &kp LC(LS(R))                                            &mo 5            &kp F6             &kp F7         &kp F8         &kp F9                              &kp F10        &kp F11
&kp LA(LC(LG(Y)))  &kp LA(F4)                          &kp LC(F4)  &trans     &kp LC(R)       &kp LC(T)  &kp LG(LC(LA(N5)))                                       &kp PRINTSCREEN  &none              &none          &kp LC(LS(I))  &holdtap_tap_preferred LG(O) LC(O)  &kp LS(LC(P))  &smiley
&trans             &holdtap_tap_preferred LG(A) LC(A)  &kp LC(S)   &mkp MB3   &mkp MB1        &mkp MB2   &kp LG(LC(LA(N6)))  &trans  &trans      &trans  &trans   &none            &kp LEFT           &kp DOWN       &kp UP_ARROW   &kp RIGHT                           &none          &holdtap_tap_preferred LG(SQT) SQT
&kp LEFT_SHIFT     &kp LC(Z)                           &kp LC(X)   &kp LC(C)  &kp LS(INSERT)  &kp LG(V)                              &trans      &trans                            &mt HOME LC(LEFT)  &kp MINUS      &equal_lt      &mt END LC(RIGHT)                   &none          &macro_quote_pair
&kp LCTRL          &none                               &trans      &mkp MB4   &mkp MB5                   &none               &none   &trans      &trans  &as SQT  &kp LA(SPACE)                       &macro_parens  &macro_square  &macro_curly                        &macro_pointy  &single_quote_pair
            >;
        };

        keypad {
            bindings = <
&kp EQUAL  &kp N1     &kp N2    &kp N3    &kp N4     &kp N5  &trans                                                   &mo 0      &kp N6  &kp KP_NUM  &kp KP_EQUAL  &kp KP_DIVIDE  &kp KP_MULTIPLY  &kp MINUS
&kp TAB    &kp Q      &kp W     &kp E     &kp R      &kp T   &none                                                    &none      &kp Y   &kp KP_N7   &kp KP_N8     &kp KP_N9      &kp KP_MINUS     &kp BSLH
&kp ESC    &kp A      &kp S     &kp D     &kp F      &kp G   &none     &kp LCTRL  &kp LALT      &kp LGUI   &kp RCTRL  &none      &kp H   &kp KP_N4   &kp KP_N5     &kp KP_N6      &kp KP_PLUS      &kp SQT
&kp LSHFT  &kp Z      &kp X     &kp C     &kp V      &kp B                        &kp HOME      &kp PG_UP                        &kp N   &kp KP_N1   &kp KP_N2     &kp KP_N3      &kp KP_ENTER     &kp RSHFT
&mo 5      &kp GRAVE  &kp CAPS  &kp LEFT  &kp RIGHT          &kp BSPC  &kp DEL    &kp END       &kp PG_DN  &kp ENTER  &kp KP_N0          &kp UP      &kp DOWN      &kp KP_DOT     &kp RBKT         &mo 5
            >;
        };

        mod {
            bindings = <
&none  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4  &none                                                  &trans                  &none  &none       &none       &none  &none  &none
&none  &none         &none         &none         &none         &none         &bootloader                                            &bootloader             &none  &none       &none       &none  &none  &none
&none  &none         &none         &none         &none         &none         &none        &none  &none      &bt BT_CLR  &none       &rgb_ug RGB_MEFS_CMD 5  &none  &none       &none       &none  &none  &none
&none  &none         &none         &none         &macro_ver    &none                             &none      &none                                           &none  &none       &none       &none  &none  &none
&none  &none         &none         &none         &none                       &none        &none  &none      &none       &bl BL_TOG  &rgb_ug RGB_TOG                &bl BL_INC  &bl BL_DEC  &none  &none  &none
            >;
        };

        visual_studio {
            bindings = <
&kp LS(LC(R))  &kp F1               &kp F2             &kp F3           &kp F4         &kp F5         &kp F6                                                       &kp F7             &kp F8           &kp F9           &kp F10       &kp F11        &kp F12  &kp LC(LA(N1))
&trans         &trans               &vs_close_windows  &kp LA(LS(D))    &kp LS(LC(R))  &kp LA(LS(R))  &kp MINUS                                                    &trans             &trans           &kp LS(LA(F12))  &trans        &trans         &trans   &kp LC(LA(N2))
&kp LSHFT      &trans               &vs_git_commit     &kp LS(LC(F12))  &kp LC(LS(F))  &kp LC(T)      &trans     &kp F11  &trans            &trans  &trans         &trans             &vs_git_history  &kp LA(END)      &kp LA(HOME)  &kp LS(LA(L))  &trans   &trans
&trans         &kp LC(PAUSE_BREAK)  &kp F9             &vs_clean_build  &kp F11        &kp LS(LC(B))                      &kp LA(HOME)      &trans                                    &kp LS(F2)       &kp LA(BSLH)     &trans        &trans         &trans   &trans
&kp LA(SLASH)  &trans               &trans             &trans           &kp F10                       &none      &kp F9   &kp LA(END)       &trans  &kp LA(ENTER)  &kp LS(LC(SPACE))                   &trans           &trans        &trans         &trans   &kp LA(ENTER)
            >;
        };

        meh {
            bindings = <
&trans  &trans             &trans             &trans             &trans             &trans             &trans                                      &trans  &trans             &trans             &trans             &trans             &trans             &trans
&trans  &kp LS(LA(LC(Q)))  &kp LS(LA(LC(W)))  &kp LS(LA(LC(E)))  &kp LS(LA(LC(R)))  &kp LS(LA(LC(T)))  &trans                                      &trans  &kp LS(LA(LC(Y)))  &kp LS(LA(LC(U)))  &kp LS(LA(LC(I)))  &kp LS(LA(LC(O)))  &kp LC(LA(LS(P)))  &trans
&trans  &kp LS(LA(LC(A)))  &kp LS(LA(LC(S)))  &kp LS(LA(LC(D)))  &kp LS(LA(LC(F)))  &kp LS(LA(LC(G)))  &trans  &trans  &trans      &trans  &trans  &trans  &kp LA(LS(LC(H)))  &kp LS(LA(LC(J)))  &kp LC(LA(LS(K)))  &kp LC(LA(LS(L)))  &trans             &trans
&trans  &kp LS(LA(LC(Z)))  &kp LS(LA(LC(X)))  &kp LS(LA(LC(C)))  &kp LS(LA(LC(V)))  &kp LC(LA(LS(B)))                  &trans      &trans                  &kp LS(LA(LC(N)))  &kp LC(LA(LS(M)))  &trans             &trans             &trans             &trans
&trans  &trans             &trans             &trans             &trans                                &trans  &trans  &trans      &trans  &trans  &trans                     &trans             &trans             &trans             &trans             &trans
            >;
        };

        mac_command {
            bindings = <
&kp LG(EQUAL)   &kp LG(N1)  &kp LG(N2)  &kp LG(N3)  &kp LG(N4)  &kp LG(N5)  &trans                                      &trans  &kp LG(N6)  &kp LG(N7)  &kp LG(N8)     &kp LG(N9)   &kp LG(N0)    &trans
&trans          &kp LG(Q)   &kp LG(W)   &kp LG(E)   &kp LG(R)   &kp LG(T)   &trans                                      &trans  &kp LG(Y)   &kp LG(U)   &kp LG(I)      &kp LG(O)    &kp LG(P)     &kp LG(BSLH)
&kp LEFT_SHIFT  &kp LG(A)   &kp LG(S)   &kp LG(D)   &kp LG(F)   &kp LG(G)   &trans  &trans  &trans      &trans  &trans  &trans  &kp LG(H)   &kp LG(J)   &kp LG(K)      &kp LG(L)    &kp LG(SEMI)  &kp LG(SQT)
&none           &kp LG(Z)   &kp LG(X)   &kp LG(C)   &kp LG(V)   &kp LG(B)                   &trans      &trans                  &kp LG(N)   &kp LG(M)   &kp LG(COMMA)  &kp LG(DOT)  &kp LG(FSLH)  &trans
&kp LEFT_ALT    &trans      &trans      &trans      &trans                  &trans  &trans  &trans      &trans  &trans  &trans              &trans      &trans         &trans       &trans        &trans
            >;
        };

        windows_danish {
            bindings = <
&none           &none      &none  &none  &none  &none  &none                                  &none  &none  &none  &none  &none      &none  &none
&none           &none      &none  &none  &none  &none  &none                                  &none  &none  &none  &none  &as LG(O)  &none  &none
&none           &kp LG(A)  &none  &none  &none  &none  &none  &none  &none      &none  &none  &none  &none  &none  &none  &none      &none  &as LG(SQT)
&kp LEFT_SHIFT  &none      &none  &none  &none  &none                &none      &none                &none  &none  &none  &none      &none  &none
&none           &none      &none  &none  &none         &none  &none  &none      &none  &none  &none         &none  &none  &none      &none  &none
            >;
        };

        mac_danish {
            bindings = <
&trans  &trans     &trans  &trans  &trans  &trans  &trans                                      &trans  &trans  &trans  &trans  &trans     &trans  &trans
&trans  &trans     &trans  &trans  &trans  &trans  &trans                                      &trans  &trans  &trans  &trans  &as LA(O)  &trans  &trans
&trans  &as LA(A)  &trans  &trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans  &trans  &trans  &trans  &trans     &trans  &as LA(SQT)
&trans  &trans     &trans  &trans  &trans  &trans                  &trans      &trans                  &trans  &trans  &trans  &trans     &trans  &trans
&trans  &trans     &trans  &trans  &trans          &trans  &trans  &trans      &trans  &trans  &trans          &trans  &trans  &trans     &trans  &trans
            >;
        };

        app_switcher_mac {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans  &trans                                                &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans                                                &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &kp F13           &trans  &trans      &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans                            &trans      &trans                  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans          &f13_confirm_mac  &trans  &trans      &trans  &trans  &trans          &trans  &trans  &trans  &trans  &trans
            >;
        };
    };
};
